From b844386e52122927efb54552209850611e69f951 Mon Sep 17 00:00:00 2001
From: debbuild <debbuild>
Date: Sat, 4 Nov 2023 15:38:35 +0100
Subject: [PATCH 22/33] Forward-declare Graph and Vertex structures.

---
 PROTOTYPES/assign_lisa.ch      |  5 -----
 PROTOTYPES/book_components.ch  |  3 +--
 PROTOTYPES/econ_order.ch       |  9 ---------
 PROTOTYPES/football.ch         |  5 -----
 PROTOTYPES/gb_basic.ch         |  6 ++----
 PROTOTYPES/gb_books.ch         |  8 +-------
 PROTOTYPES/gb_dijk.ch          |  5 +++--
 PROTOTYPES/gb_econ.ch          |  9 +--------
 PROTOTYPES/gb_games.ch         |  8 +-------
 PROTOTYPES/gb_gates.ch         |  7 +------
 PROTOTYPES/gb_lisa.ch          |  5 ++---
 PROTOTYPES/gb_miles.ch         |  9 ++-------
 PROTOTYPES/gb_plane.ch         | 16 ++++++++--------
 PROTOTYPES/gb_raman.ch         |  3 ++-
 PROTOTYPES/gb_rand.ch          |  3 ++-
 PROTOTYPES/gb_roget.ch         |  9 +--------
 PROTOTYPES/gb_save.ch          |  4 +---
 PROTOTYPES/gb_sort.ch          |  2 +-
 PROTOTYPES/gb_words.ch         |  9 ++-------
 PROTOTYPES/girth.ch            |  5 -----
 PROTOTYPES/ladders.ch          |  5 -----
 PROTOTYPES/miles_span.ch       |  9 ---------
 PROTOTYPES/multiply.ch         |  5 -----
 PROTOTYPES/queen.ch            |  5 -----
 PROTOTYPES/roget_components.ch |  5 -----
 PROTOTYPES/take_risc.ch        |  5 -----
 PROTOTYPES/test_sample.ch      |  3 +--
 PROTOTYPES/word_components.ch  |  5 -----
 28 files changed, 32 insertions(+), 140 deletions(-)

diff --git a/PROTOTYPES/assign_lisa.ch b/PROTOTYPES/assign_lisa.ch
index 70ddc49..086c6f9 100644
--- a/PROTOTYPES/assign_lisa.ch
+++ b/PROTOTYPES/assign_lisa.ch
@@ -1,8 +1,3 @@
-@x l.69
-#include "gb_graph.h" /* the GraphBase data structures */
-@y
-@z
-
 @x l.72
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/book_components.ch b/PROTOTYPES/book_components.ch
index 6342433..97edbf5 100644
--- a/PROTOTYPES/book_components.ch
+++ b/PROTOTYPES/book_components.ch
@@ -1,5 +1,4 @@
-@x l.51
-#include "gb_graph.h" /* the GraphBase data structures */
+@x l.52
 #include "gb_books.h" /* the |book| routine */
 #include "gb_io.h" /* the |imap_chr| routine */
 @y
diff --git a/PROTOTYPES/econ_order.ch b/PROTOTYPES/econ_order.ch
index af6db08..81686c0 100644
--- a/PROTOTYPES/econ_order.ch
+++ b/PROTOTYPES/econ_order.ch
@@ -1,12 +1,3 @@
-@x l.75
-#include "gb_graph.h" /* the GraphBase data structures */
-#include "gb_flip.h" /* the random number generator */
-#include "gb_econ.h" /* the |econ| routine */
-@y
-#include "gb_econ.h" /* the |econ| routine */
-#include "gb_flip.h" /* the random number generator */
-@z
-
 @x l.80
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/football.ch b/PROTOTYPES/football.ch
index 7537076..67a783c 100644
--- a/PROTOTYPES/football.ch
+++ b/PROTOTYPES/football.ch
@@ -1,8 +1,3 @@
-@x l.54
-#include "gb_graph.h" /* the standard GraphBase data structures */
-@y
-@z
-
 @x l.61
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/gb_basic.ch b/PROTOTYPES/gb_basic.ch
index ec004c1..7e6a44f 100644
--- a/PROTOTYPES/gb_basic.ch
+++ b/PROTOTYPES/gb_basic.ch
@@ -15,9 +15,7 @@ extern Graph *induced(); /* a graph induced from another */
 @y
 #ifndef GB_BASIC_H
 #define GB_BASIC_H
-@#
-#include "gb_graph.h" /* we use the {\sc GB\_\,GRAPH} data structures */
-@#
+typedef struct graph_struct Graph;
 extern Graph *board(long,long,long,long,long,long,long);
    /* moves on generalized chessboards */
 extern Graph *simplex(unsigned long,long,long,long,long,long,long);
@@ -49,6 +47,7 @@ extern Graph *induced(Graph *,char *,long,long,long);
 #include "gb_graph.h" /* we use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_basic.h" /* we use our own interface |@(gb_basic.h@>| first */
+#include "gb_graph.h" /* we use the {\sc GB\_\,GRAPH} data structures */
 @z
 
 @x l.176
@@ -461,7 +460,6 @@ extern Graph *wheel(); /* standard applications of |induced| */
 extern Graph *bi_complete(unsigned long,unsigned long,long);
 extern Graph *wheel(unsigned long,unsigned long,long);
    /* standard applications of |induced| */
-@#
 #endif /* |GB_BASIC_H| */
 @z
 
diff --git a/PROTOTYPES/gb_books.ch b/PROTOTYPES/gb_books.ch
index a3c085d..41ead13 100644
--- a/PROTOTYPES/gb_books.ch
+++ b/PROTOTYPES/gb_books.ch
@@ -4,7 +4,7 @@ extern Graph *bi_book();
 @y
 #ifndef GB_BOOKS_H
 #define GB_BOOKS_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
 extern Graph *book(char *,unsigned long,unsigned long,@|
    unsigned long,unsigned long,long,long,long);
 extern Graph *bi_book(char *,unsigned long,unsigned long,@|
@@ -13,13 +13,8 @@ extern Graph *bi_book(char *,unsigned long,unsigned long,@|
 
 @x l.148
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_flip.h" /* we will use the {\sc GB\_\,FLIP} routines
-                        for random numbers */
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_books.h" /* we use our own interface |@(gb_books.h@>| first */
-#include "gb_flip.h" /* we will use the {\sc GB\_\,FLIP} routines
-                        for random numbers */
 @z
 
 @x l.158
@@ -97,7 +92,6 @@ register unsigned long k; /* all-purpose indices */
 #define in_count @t\quad@> y.I /* utility field |y| counts appearances in selected chapters */
 #define out_count @t\quad@> x.I /* utility field |x| counts appearances in other chapters */
 #define short_code @t\quad@> u.I /* utility field |u| contains a radix-36 number */
-@#
 #endif /* |GB_BOOKS_H| */
 @z
 
diff --git a/PROTOTYPES/gb_dijk.ch b/PROTOTYPES/gb_dijk.ch
index 7474402..911e4ea 100644
--- a/PROTOTYPES/gb_dijk.ch
+++ b/PROTOTYPES/gb_dijk.ch
@@ -2,6 +2,7 @@
 #include "gb_graph.h" /* define the standard GraphBase data structures */
 @y
 #include "gb_dijk.h" /* we use our own interface |@(gb_dijk.h@>| first */
+#include "gb_graph.h" /* define the standard GraphBase data structures */
 @z
 
 @x l.68
@@ -13,7 +14,8 @@ extern void print_dijkstra_result(); /* procedure to display the answer */
 @(gb_dijk.h@>=
 #ifndef GB_DIJK_H
 #define GB_DIJK_H
-#include "gb_graph.h" /* define the standard GraphBase data structures */
+typedef struct graph_struct Graph;
+typedef struct vertex_struct Vertex;
 extern long dijkstra(Vertex *,Vertex *,Graph *,long (*)(Vertex *));
    /* procedure to calculate shortest paths */
 #define print_dijkstra_result p_dijkstra_result /* shorthand for linker */
@@ -223,6 +225,5 @@ extern void init_128(long);
 extern Vertex *del_128(void);
 extern void enq_128(Vertex *,long);
 extern void req_128(Vertex *,long);
-@#
 #endif /* |GB_DIJK_H| */
 @z
diff --git a/PROTOTYPES/gb_econ.ch b/PROTOTYPES/gb_econ.ch
index a5082c9..2661df2 100644
--- a/PROTOTYPES/gb_econ.ch
+++ b/PROTOTYPES/gb_econ.ch
@@ -3,7 +3,7 @@ extern Graph *econ();
 @y
 #ifndef GB_ECON_H
 #define GB_ECON_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
 extern Graph *econ(unsigned long,unsigned long,unsigned long,long);
 @z
 
@@ -12,7 +12,6 @@ extern Graph *econ(unsigned long,unsigned long,unsigned long,long);
 @y
 @(gb_econ.h@>=
 #define flow @t\quad@> a.I /* utility field |a| specifies the flow in an arc */
-@#
 #endif /* |GB_ECON_H| */
 @z
 
@@ -28,14 +27,8 @@ extern Graph *econ(unsigned long,unsigned long,unsigned long,long);
 
 @x l.181
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h"
- /* and of course we'll use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_econ.h" /* we use our own interface |@(gb_econ.h@>| first */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
 @z
 
 @x l.190
diff --git a/PROTOTYPES/gb_games.ch b/PROTOTYPES/gb_games.ch
index df1e3fb..d0523b0 100644
--- a/PROTOTYPES/gb_games.ch
+++ b/PROTOTYPES/gb_games.ch
@@ -3,7 +3,7 @@ extern Graph *games();
 @y
 #ifndef GB_GAMES_H
 #define GB_GAMES_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
 extern Graph *games(unsigned long,long,long,long,long,long,long,long);
 @z
 
@@ -65,19 +65,13 @@ extern Graph *games(unsigned long,long,long,long,long,long,long,long);
 #define NEUTRAL 2
 #define AWAY 3
 #define date @[b.I@]
-@#
 #endif /* |GB_GAMES_H| */
 @z
 
 @x l.164
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_games.h" /* we use our own interface |@(gb_games.h@>| first */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
 @z
 
 @x l.174
diff --git a/PROTOTYPES/gb_gates.ch b/PROTOTYPES/gb_gates.ch
index 425554b..66aeae6 100644
--- a/PROTOTYPES/gb_gates.ch
+++ b/PROTOTYPES/gb_gates.ch
@@ -9,7 +9,7 @@ extern long run_risc(); /* simulate the microprocessor */
 @y
 #ifndef GB_GATES_H
 #define GB_GATES_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
 #define print_gates p_gates /* abbreviation for Procrustean linkers */
 extern Graph *risc(unsigned long);
    /* make a network for a microprocessor */
@@ -65,7 +65,6 @@ extern long run_risc(Graph *,unsigned long [],unsigned long,unsigned long);
 #define OR @t\quad@> '|'
 #define NOT @t\quad@> '~'
 #define XOR @t\quad@> '^'
-@#
 #endif /* |GB_GATES_H| */
 @z
 
@@ -83,13 +82,9 @@ long gate_eval(
 
 @x l.184
 #include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h"
- /* and we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_gates.h" /* we use our own interface |@(gb_gates.h@>| first */
 #include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
 @z
 
 @x l.215
diff --git a/PROTOTYPES/gb_lisa.ch b/PROTOTYPES/gb_lisa.ch
index d5c6f69..f134995 100644
--- a/PROTOTYPES/gb_lisa.ch
+++ b/PROTOTYPES/gb_lisa.ch
@@ -10,7 +10,8 @@ extern Graph *bi_lisa();
 @(gb_lisa.h@>=
 #ifndef GB_LISA_H
 #define GB_LISA_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct area_pointers*Area[1];
+typedef struct graph_struct Graph;
 #define plane_lisa p_lisa
 extern long* lisa(unsigned long,unsigned long,unsigned long,@|
    unsigned long,unsigned long,unsigned long,unsigned long,@|
@@ -33,13 +34,11 @@ extern Graph *bi_lisa(unsigned long,unsigned long,@|
 extern char lisa_id[];
 @y
 extern char lisa_id[];
-@#
 #endif /* |GB_LISA_H| */
 @z
 
 @x l.142
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_lisa.h" /* we use our own interface |@(gb_lisa.h@>| first */
 @z
diff --git a/PROTOTYPES/gb_miles.ch b/PROTOTYPES/gb_miles.ch
index 71f4b77..c839e95 100644
--- a/PROTOTYPES/gb_miles.ch
+++ b/PROTOTYPES/gb_miles.ch
@@ -3,7 +3,8 @@ extern Graph *miles();
 @y
 #ifndef GB_MILES_H
 #define GB_MILES_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
+typedef struct vertex_struct Vertex;
 extern Graph *miles(unsigned long,long,long,long,@|
   unsigned long,unsigned long,long);
 @z
@@ -16,13 +17,8 @@ extern Graph *miles(unsigned long,long,long,long,@|
 
 @x l.107
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_miles.h" /* we use our own interface |@(gb_miles.h@>| first */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
 @z
 
 @x l.116
@@ -91,6 +87,5 @@ We can in fact have |miles_distance(u,v)<0| when |miles_distance(v,u)>0|,
 extern long miles_distance();
 @y
 extern long miles_distance(Vertex *,Vertex *);
-@#
 #endif /* |GB_MILES_H| */
 @z
diff --git a/PROTOTYPES/gb_plane.ch b/PROTOTYPES/gb_plane.ch
index a5ba68c..3ac25be 100644
--- a/PROTOTYPES/gb_plane.ch
+++ b/PROTOTYPES/gb_plane.ch
@@ -10,7 +10,8 @@ extern void delaunay();
 @(gb_plane.h@>=
 #ifndef GB_PLANE_H
 #define GB_PLANE_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
+typedef struct vertex_struct Vertex;
 #define plane_miles p_miles /* abbreviation for Procrustean external linkage */
 extern Graph *plane(unsigned long,unsigned long,unsigned long,@|
   unsigned long,unsigned long,long);
@@ -29,16 +30,15 @@ extern void delaunay(Graph *,void (*)(Vertex *,Vertex *));
 
 @x l.76
 #include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
-#include "gb_miles.h" /* and we might use {\sc GB\_\,MILES} for mileage data */
-#include "gb_io.h"
- /* and {\sc GB\_\,MILES} uses {\sc GB\_\,IO}, which has |str_buf| */
 @y
 #include "gb_plane.h" /* we use our own interface |@(gb_plane.h@>| first */
 #include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_miles.h" /* and we might use {\sc GB\_\,MILES} for mileage data */
+@z
+
+@x l.80
+#include "gb_io.h"
+ /* and {\sc GB\_\,MILES} uses {\sc GB\_\,IO}, which has |str_buf| */
+@y
 @z
 
 @x l.92
diff --git a/PROTOTYPES/gb_raman.ch b/PROTOTYPES/gb_raman.ch
index 8b9f92a..096580e 100644
--- a/PROTOTYPES/gb_raman.ch
+++ b/PROTOTYPES/gb_raman.ch
@@ -3,7 +3,7 @@ extern Graph *raman();
 @y
 #ifndef GB_RAMAN_H
 #define GB_RAMAN_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
 extern Graph *raman(long,long,unsigned long,unsigned long);
 #endif /* | GB_RAMAN_H| */
 @z
@@ -12,6 +12,7 @@ extern Graph *raman(long,long,unsigned long,unsigned long);
 #include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_raman.h" /* we use our own interface |@(gb_raman.h@>| first */
+#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @z
 
 @x l.92
diff --git a/PROTOTYPES/gb_rand.ch b/PROTOTYPES/gb_rand.ch
index 7fbde5a..172d5b1 100644
--- a/PROTOTYPES/gb_rand.ch
+++ b/PROTOTYPES/gb_rand.ch
@@ -8,7 +8,7 @@
 @(gb_rand.h@>=
 #ifndef GB_RAND_H
 #define GB_RAND_H
-#include "gb_graph.h" /* this header file teaches \CEE/ about GraphBase */
+typedef struct graph_struct Graph;
 @z
 
 @x l.28
@@ -33,6 +33,7 @@ extern long random_lengths(Graph *,long,long,long,long *,long);
 #include "gb_graph.h" /* this header file teaches \CEE/ about GraphBase */
 @y
 #include "gb_rand.h" /* we use our own interface |@(gb_rand.h@>| first */
+#include "gb_graph.h" /* this header file teaches \CEE/ about GraphBase */
 @z
 
 @x l.139
diff --git a/PROTOTYPES/gb_roget.ch b/PROTOTYPES/gb_roget.ch
index 503f61d..44eddcf 100644
--- a/PROTOTYPES/gb_roget.ch
+++ b/PROTOTYPES/gb_roget.ch
@@ -3,20 +3,14 @@ extern Graph *roget();
 @y
 #ifndef GB_ROGET_H
 #define GB_ROGET_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
 extern Graph *roget(unsigned long,unsigned long,unsigned long,long);
 @z
 
 @x l.70
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h"
- /* and we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_roget.h" /* we use our own interface |@(gb_roget.h@>| first */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
 @z
 
 @x l.78
@@ -53,7 +47,6 @@ Graph *roget(
 @y
 #define cat_no @t\quad@> u.I
   /* utility field |u| of each vertex holds the category number */
-@#
 #endif /* |GB_ROGET_H| */
 @z
 
diff --git a/PROTOTYPES/gb_save.ch b/PROTOTYPES/gb_save.ch
index e5695c5..58279eb 100644
--- a/PROTOTYPES/gb_save.ch
+++ b/PROTOTYPES/gb_save.ch
@@ -6,7 +6,7 @@ extern Graph *restore_graph();
 @(gb_save.h@>=
 #ifndef GB_SAVE_H
 #define GB_SAVE_H
-#include "gb_graph.h" /* we use the data structures of {\sc GB\_\,GRAPH} */
+typedef struct graph_struct Graph;
 extern long save_graph(Graph *,char *);
 extern Graph *restore_graph(char *);
 #endif /* |GB_SAVE_H| */
@@ -14,8 +14,6 @@ extern Graph *restore_graph(char *);
 
 @x l.54
 #include "gb_io.h" /* we use the input/output conventions of {\sc GB\_\,IO} */
-#include "gb_graph.h"
- /* and, of course, the data structures of {\sc GB\_\,GRAPH} */
 @y
 #include "gb_save.h" /* we use our own interface |@(gb_save.h@>| first */
 @z
diff --git a/PROTOTYPES/gb_sort.ch b/PROTOTYPES/gb_sort.ch
index 284489c..6e97647 100644
--- a/PROTOTYPES/gb_sort.ch
+++ b/PROTOTYPES/gb_sort.ch
@@ -4,7 +4,7 @@
 @y
 #include "gb_sort.h" /* we use our own interface |@(gb_sort.h@>| first */
 #include "gb_flip.h" /* we need to use the random number generator */
-#include <stdio.h> /* the \.{NULL} pointer (|NULL|) is defined here */
+#include <stddef.h> /* the \.{NULL} pointer (|NULL|) is defined here */
 @z
 
 @x l.69
diff --git a/PROTOTYPES/gb_words.ch b/PROTOTYPES/gb_words.ch
index 0a70ab3..b9ee450 100644
--- a/PROTOTYPES/gb_words.ch
+++ b/PROTOTYPES/gb_words.ch
@@ -4,20 +4,16 @@ extern Vertex *find_word();
 @y
 #ifndef GB_WORDS_H
 #define GB_WORDS_H
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
+typedef struct graph_struct Graph;
+typedef struct vertex_struct Vertex;
 extern Graph *words(unsigned long,long [],long,long);
 extern Vertex *find_word(char *,void (*)(Vertex *));
 @z
 
 @x l.152
 #include "gb_io.h" /* we will use the {\sc GB\_\,IO} routines for input */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
-#include "gb_graph.h" /* we will use the {\sc GB\_\,GRAPH} data structures */
 @y
 #include "gb_words.h" /* we use our own interface |@(gb_words.h@>| first */
-#include "gb_flip.h"
- /* we will use the {\sc GB\_\,FLIP} routines for random numbers */
 @z
 
 @x l.162
@@ -73,7 +69,6 @@ static long iabs(
 @(gb_words.h@>=
 #define weight @[u.I@] /* weighted frequencies */
 #define loc @[a.I@] /* index of difference (0, 1, 2, 3, or 4) */
-@#
 #endif /* |GB_WORDS_H| */
 @z
 
diff --git a/PROTOTYPES/girth.ch b/PROTOTYPES/girth.ch
index 5ba67b3..94038d4 100644
--- a/PROTOTYPES/girth.ch
+++ b/PROTOTYPES/girth.ch
@@ -1,8 +1,3 @@
-@x l.61
-#include "gb_graph.h" /* the standard GraphBase data structures */
-@y
-@z
-
 @x l.65
 main()
 @y
diff --git a/PROTOTYPES/ladders.ch b/PROTOTYPES/ladders.ch
index 65acb88..e968b8a 100644
--- a/PROTOTYPES/ladders.ch
+++ b/PROTOTYPES/ladders.ch
@@ -1,8 +1,3 @@
-@x l.85
-#include "gb_graph.h" /* the standard GraphBase data structures */
-@y
-@z
-
 @x l.90
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/miles_span.ch b/PROTOTYPES/miles_span.ch
index e886279..4de0843 100644
--- a/PROTOTYPES/miles_span.ch
+++ b/PROTOTYPES/miles_span.ch
@@ -1,12 +1,3 @@
-@x l.91
-#include "gb_graph.h" /* the GraphBase data structures */
-#include "gb_save.h" /* |restore_graph| */
-#include "gb_miles.h" /* the |miles| routine */
-@y
-#include "gb_miles.h" /* the |miles| routine */
-#include "gb_save.h" /* |restore_graph| */
-@z
-
 @x l.99
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/multiply.ch b/PROTOTYPES/multiply.ch
index 17affec..bc19782 100644
--- a/PROTOTYPES/multiply.ch
+++ b/PROTOTYPES/multiply.ch
@@ -1,8 +1,3 @@
-@x l.33
-#include "gb_graph.h" /* the standard GraphBase data structures */
-@y
-@z
-
 @x l.38
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/queen.ch b/PROTOTYPES/queen.ch
index d9c4fbc..1c3ea52 100644
--- a/PROTOTYPES/queen.ch
+++ b/PROTOTYPES/queen.ch
@@ -1,8 +1,3 @@
-@x l.22
-#include "gb_graph.h" /* we use the {\sc GB\_\,GRAPH} data structures */
-@y
-@z
-
 @x l.26
 main()
 @y
diff --git a/PROTOTYPES/roget_components.ch b/PROTOTYPES/roget_components.ch
index 83fba2f..72b5633 100644
--- a/PROTOTYPES/roget_components.ch
+++ b/PROTOTYPES/roget_components.ch
@@ -1,8 +1,3 @@
-@x l.40
-#include "gb_graph.h" /* the GraphBase data structures */
-@y
-@z
-
 @x l.45
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/take_risc.ch b/PROTOTYPES/take_risc.ch
index c471a73..d007478 100644
--- a/PROTOTYPES/take_risc.ch
+++ b/PROTOTYPES/take_risc.ch
@@ -1,8 +1,3 @@
-@x l.31
-#include "gb_graph.h" /* the standard GraphBase data structures */
-@y
-@z
-
 @x l.35
 main(argc,argv)
   int argc; /* the number of command-line arguments */
diff --git a/PROTOTYPES/test_sample.ch b/PROTOTYPES/test_sample.ch
index ebcdfb0..4996616 100644
--- a/PROTOTYPES/test_sample.ch
+++ b/PROTOTYPES/test_sample.ch
@@ -1,5 +1,4 @@
-@x l.26
-#include "gb_graph.h" /* we use the {\sc GB\_\,GRAPH} data structures */
+@x l.27
 #include "gb_io.h" /* and the GraphBase input/output routines */
 @y
 @z
diff --git a/PROTOTYPES/word_components.ch b/PROTOTYPES/word_components.ch
index c604fd0..fa625d5 100644
--- a/PROTOTYPES/word_components.ch
+++ b/PROTOTYPES/word_components.ch
@@ -1,8 +1,3 @@
-@x l.16
-#include "gb_graph.h" /* the GraphBase data structures */
-@y
-@z
-
 @x l.19
 main()
 @y
-- 
2.45.2

